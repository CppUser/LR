1. The Custom Asset (UHTN) This is your data container class class UHTN : public UObject in this case

2. The Factory (UHTNFactory)
    Unreal needs to know how to create a new instance of your asset when a user clicks Add New → HTN in the Content Browser.
    UHTNFactory handles this.
    It tells the editor:
    “I can create UHTN assets.”
    “When the user creates one, call FactoryCreateNew and build a fresh UHTN object.”
    Pipeline step: This is where your asset enters the engine (asset creation stage).
    
3.  The Asset Type Actions (AssetTypeActions_HTN)
    This class is registered with the AssetTools system.
    Responsibilities:
    Defines how the asset shows up in the Content Browser (name, color, category).
    Handles what happens when you double-click the asset (OpenAssetEditor).
    Pipeline step: This is the connection between Content Browser and your editor.
    
4. The Module (FHTNEditorModule)
    Your plugin’s main module (the “glue”).
    It does 3 critical jobs:
        Registers your asset type actions with AssetTools (so UE knows about them).
        Provides an entry point to create editors (CreateEditor).
        Manages extensibility managers for menus/toolbar (so you can extend later).
    Pipeline step: This is where your plugin “comes alive” when the editor loads.
    
5. The Editor (FHTNEditor)
    Your custom editor implementation.
    Inherits from FWorkflowCentricApplication, which is UE’s standard framework for asset editors (like Blueprint Editor, Behavior Tree Editor, etc.).
    Responsibilities:
        Initialize when called from CreateEditor.
        Provide window/tab setup.
        Manage editing lifecycle (InitAssetEditor, GetToolkitName, etc.).
    Pipeline step: This is where your actual editor UI lives.
    
🔹 How it All Ties Together
    You create a new UHTN asset → Factory makes it.
    Asset shows up in Content Browser → AssetTypeActions_HTN defines its look & behavior.
    You double-click → OpenAssetEditor → calls FHTNEditorModule::CreateEditor.
    The module spawns a FHTNEditor instance.
    The editor initializes via InitAssetEditor and you get your custom editor window.